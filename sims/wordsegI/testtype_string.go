// Code generated by "stringer -type=TestType"; DO NOT EDIT.

package main

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TestingTypeNotSet-0]
	_ = x[SequenceTesting-1]
	_ = x[PartWholeTesting-2]
	_ = x[TestTypeN-3]
}

const _TestType_name = "TestingTypeNotSetSequenceTestingPartWholeTestingTestTypeN"

var _TestType_index = [...]uint8{0, 17, 32, 48, 57}

func (i TestType) String() string {
	if i < 0 || i >= TestType(len(_TestType_index)-1) {
		return "TestType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TestType_name[_TestType_index[i]:_TestType_index[i+1]]
}

func (i *TestType) FromString(s string) error {
	for j := 0; j < len(_TestType_index)-1; j++ {
		if s == _TestType_name[_TestType_index[j]:_TestType_index[j+1]] {
			*i = TestType(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TestType")
}
